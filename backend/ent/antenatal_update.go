// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/F12aPPy/app/ent/antenatal"
	"github.com/F12aPPy/app/ent/babystatus"
	"github.com/F12aPPy/app/ent/patient"
	"github.com/F12aPPy/app/ent/predicate"
	"github.com/F12aPPy/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// AntenatalUpdate is the builder for updating Antenatal entities.
type AntenatalUpdate struct {
	config
	hooks      []Hook
	mutation   *AntenatalMutation
	predicates []predicate.Antenatal
}

// Where adds a new predicate for the builder.
func (au *AntenatalUpdate) Where(ps ...predicate.Antenatal) *AntenatalUpdate {
	au.predicates = append(au.predicates, ps...)
	return au
}

// SetADDEDTIME sets the ADDED_TIME field.
func (au *AntenatalUpdate) SetADDEDTIME(t time.Time) *AntenatalUpdate {
	au.mutation.SetADDEDTIME(t)
	return au
}

// SetNillableADDEDTIME sets the ADDED_TIME field if the given value is not nil.
func (au *AntenatalUpdate) SetNillableADDEDTIME(t *time.Time) *AntenatalUpdate {
	if t != nil {
		au.SetADDEDTIME(*t)
	}
	return au
}

// SetGETMOMID sets the GETMOM edge to Patient by id.
func (au *AntenatalUpdate) SetGETMOMID(id int) *AntenatalUpdate {
	au.mutation.SetGETMOMID(id)
	return au
}

// SetNillableGETMOMID sets the GETMOM edge to Patient by id if the given value is not nil.
func (au *AntenatalUpdate) SetNillableGETMOMID(id *int) *AntenatalUpdate {
	if id != nil {
		au = au.SetGETMOMID(*id)
	}
	return au
}

// SetGETMOM sets the GETMOM edge to Patient.
func (au *AntenatalUpdate) SetGETMOM(p *Patient) *AntenatalUpdate {
	return au.SetGETMOMID(p.ID)
}

// SetTAKECAREID sets the TAKECARE edge to User by id.
func (au *AntenatalUpdate) SetTAKECAREID(id int) *AntenatalUpdate {
	au.mutation.SetTAKECAREID(id)
	return au
}

// SetNillableTAKECAREID sets the TAKECARE edge to User by id if the given value is not nil.
func (au *AntenatalUpdate) SetNillableTAKECAREID(id *int) *AntenatalUpdate {
	if id != nil {
		au = au.SetTAKECAREID(*id)
	}
	return au
}

// SetTAKECARE sets the TAKECARE edge to User.
func (au *AntenatalUpdate) SetTAKECARE(u *User) *AntenatalUpdate {
	return au.SetTAKECAREID(u.ID)
}

// SetGETSTATUSID sets the GETSTATUS edge to Babystatus by id.
func (au *AntenatalUpdate) SetGETSTATUSID(id int) *AntenatalUpdate {
	au.mutation.SetGETSTATUSID(id)
	return au
}

// SetNillableGETSTATUSID sets the GETSTATUS edge to Babystatus by id if the given value is not nil.
func (au *AntenatalUpdate) SetNillableGETSTATUSID(id *int) *AntenatalUpdate {
	if id != nil {
		au = au.SetGETSTATUSID(*id)
	}
	return au
}

// SetGETSTATUS sets the GETSTATUS edge to Babystatus.
func (au *AntenatalUpdate) SetGETSTATUS(b *Babystatus) *AntenatalUpdate {
	return au.SetGETSTATUSID(b.ID)
}

// Mutation returns the AntenatalMutation object of the builder.
func (au *AntenatalUpdate) Mutation() *AntenatalMutation {
	return au.mutation
}

// ClearGETMOM clears the GETMOM edge to Patient.
func (au *AntenatalUpdate) ClearGETMOM() *AntenatalUpdate {
	au.mutation.ClearGETMOM()
	return au
}

// ClearTAKECARE clears the TAKECARE edge to User.
func (au *AntenatalUpdate) ClearTAKECARE() *AntenatalUpdate {
	au.mutation.ClearTAKECARE()
	return au
}

// ClearGETSTATUS clears the GETSTATUS edge to Babystatus.
func (au *AntenatalUpdate) ClearGETSTATUS() *AntenatalUpdate {
	au.mutation.ClearGETSTATUS()
	return au
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (au *AntenatalUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AntenatalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AntenatalUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AntenatalUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AntenatalUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AntenatalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   antenatal.Table,
			Columns: antenatal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: antenatal.FieldID,
			},
		},
	}
	if ps := au.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.ADDEDTIME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: antenatal.FieldADDEDTIME,
		})
	}
	if au.mutation.GETMOMCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.GETMOMTable,
			Columns: []string{antenatal.GETMOMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.GETMOMIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.GETMOMTable,
			Columns: []string{antenatal.GETMOMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.TAKECARECleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.TAKECARETable,
			Columns: []string{antenatal.TAKECAREColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TAKECAREIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.TAKECARETable,
			Columns: []string{antenatal.TAKECAREColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.GETSTATUSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.GETSTATUSTable,
			Columns: []string{antenatal.GETSTATUSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: babystatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.GETSTATUSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.GETSTATUSTable,
			Columns: []string{antenatal.GETSTATUSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: babystatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{antenatal.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AntenatalUpdateOne is the builder for updating a single Antenatal entity.
type AntenatalUpdateOne struct {
	config
	hooks    []Hook
	mutation *AntenatalMutation
}

// SetADDEDTIME sets the ADDED_TIME field.
func (auo *AntenatalUpdateOne) SetADDEDTIME(t time.Time) *AntenatalUpdateOne {
	auo.mutation.SetADDEDTIME(t)
	return auo
}

// SetNillableADDEDTIME sets the ADDED_TIME field if the given value is not nil.
func (auo *AntenatalUpdateOne) SetNillableADDEDTIME(t *time.Time) *AntenatalUpdateOne {
	if t != nil {
		auo.SetADDEDTIME(*t)
	}
	return auo
}

// SetGETMOMID sets the GETMOM edge to Patient by id.
func (auo *AntenatalUpdateOne) SetGETMOMID(id int) *AntenatalUpdateOne {
	auo.mutation.SetGETMOMID(id)
	return auo
}

// SetNillableGETMOMID sets the GETMOM edge to Patient by id if the given value is not nil.
func (auo *AntenatalUpdateOne) SetNillableGETMOMID(id *int) *AntenatalUpdateOne {
	if id != nil {
		auo = auo.SetGETMOMID(*id)
	}
	return auo
}

// SetGETMOM sets the GETMOM edge to Patient.
func (auo *AntenatalUpdateOne) SetGETMOM(p *Patient) *AntenatalUpdateOne {
	return auo.SetGETMOMID(p.ID)
}

// SetTAKECAREID sets the TAKECARE edge to User by id.
func (auo *AntenatalUpdateOne) SetTAKECAREID(id int) *AntenatalUpdateOne {
	auo.mutation.SetTAKECAREID(id)
	return auo
}

// SetNillableTAKECAREID sets the TAKECARE edge to User by id if the given value is not nil.
func (auo *AntenatalUpdateOne) SetNillableTAKECAREID(id *int) *AntenatalUpdateOne {
	if id != nil {
		auo = auo.SetTAKECAREID(*id)
	}
	return auo
}

// SetTAKECARE sets the TAKECARE edge to User.
func (auo *AntenatalUpdateOne) SetTAKECARE(u *User) *AntenatalUpdateOne {
	return auo.SetTAKECAREID(u.ID)
}

// SetGETSTATUSID sets the GETSTATUS edge to Babystatus by id.
func (auo *AntenatalUpdateOne) SetGETSTATUSID(id int) *AntenatalUpdateOne {
	auo.mutation.SetGETSTATUSID(id)
	return auo
}

// SetNillableGETSTATUSID sets the GETSTATUS edge to Babystatus by id if the given value is not nil.
func (auo *AntenatalUpdateOne) SetNillableGETSTATUSID(id *int) *AntenatalUpdateOne {
	if id != nil {
		auo = auo.SetGETSTATUSID(*id)
	}
	return auo
}

// SetGETSTATUS sets the GETSTATUS edge to Babystatus.
func (auo *AntenatalUpdateOne) SetGETSTATUS(b *Babystatus) *AntenatalUpdateOne {
	return auo.SetGETSTATUSID(b.ID)
}

// Mutation returns the AntenatalMutation object of the builder.
func (auo *AntenatalUpdateOne) Mutation() *AntenatalMutation {
	return auo.mutation
}

// ClearGETMOM clears the GETMOM edge to Patient.
func (auo *AntenatalUpdateOne) ClearGETMOM() *AntenatalUpdateOne {
	auo.mutation.ClearGETMOM()
	return auo
}

// ClearTAKECARE clears the TAKECARE edge to User.
func (auo *AntenatalUpdateOne) ClearTAKECARE() *AntenatalUpdateOne {
	auo.mutation.ClearTAKECARE()
	return auo
}

// ClearGETSTATUS clears the GETSTATUS edge to Babystatus.
func (auo *AntenatalUpdateOne) ClearGETSTATUS() *AntenatalUpdateOne {
	auo.mutation.ClearGETSTATUS()
	return auo
}

// Save executes the query and returns the updated entity.
func (auo *AntenatalUpdateOne) Save(ctx context.Context) (*Antenatal, error) {

	var (
		err  error
		node *Antenatal
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AntenatalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AntenatalUpdateOne) SaveX(ctx context.Context) *Antenatal {
	a, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return a
}

// Exec executes the query on the entity.
func (auo *AntenatalUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AntenatalUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AntenatalUpdateOne) sqlSave(ctx context.Context) (a *Antenatal, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   antenatal.Table,
			Columns: antenatal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: antenatal.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Antenatal.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := auo.mutation.ADDEDTIME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: antenatal.FieldADDEDTIME,
		})
	}
	if auo.mutation.GETMOMCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.GETMOMTable,
			Columns: []string{antenatal.GETMOMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.GETMOMIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.GETMOMTable,
			Columns: []string{antenatal.GETMOMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.TAKECARECleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.TAKECARETable,
			Columns: []string{antenatal.TAKECAREColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TAKECAREIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.TAKECARETable,
			Columns: []string{antenatal.TAKECAREColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.GETSTATUSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.GETSTATUSTable,
			Columns: []string{antenatal.GETSTATUSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: babystatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.GETSTATUSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatal.GETSTATUSTable,
			Columns: []string{antenatal.GETSTATUSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: babystatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	a = &Antenatal{config: auo.config}
	_spec.Assign = a.assignValues
	_spec.ScanValues = a.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{antenatal.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return a, nil
}
