// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/F12aPPy/app/ent/antenatal"
	"github.com/F12aPPy/app/ent/predicate"
	"github.com/F12aPPy/app/ent/pregnant"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// PregnantUpdate is the builder for updating Pregnant entities.
type PregnantUpdate struct {
	config
	hooks      []Hook
	mutation   *PregnantMutation
	predicates []predicate.Pregnant
}

// Where adds a new predicate for the builder.
func (pu *PregnantUpdate) Where(ps ...predicate.Pregnant) *PregnantUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetPREGNANTNAME sets the PREGNANT_NAME field.
func (pu *PregnantUpdate) SetPREGNANTNAME(s string) *PregnantUpdate {
	pu.mutation.SetPREGNANTNAME(s)
	return pu
}

// SetPREGNANTAGE sets the PREGNANT_AGE field.
func (pu *PregnantUpdate) SetPREGNANTAGE(i int) *PregnantUpdate {
	pu.mutation.ResetPREGNANTAGE()
	pu.mutation.SetPREGNANTAGE(i)
	return pu
}

// AddPREGNANTAGE adds i to PREGNANT_AGE.
func (pu *PregnantUpdate) AddPREGNANTAGE(i int) *PregnantUpdate {
	pu.mutation.AddPREGNANTAGE(i)
	return pu
}

// AddSETMOMIDs adds the SETMOM edge to Antenatal by ids.
func (pu *PregnantUpdate) AddSETMOMIDs(ids ...int) *PregnantUpdate {
	pu.mutation.AddSETMOMIDs(ids...)
	return pu
}

// AddSETMOM adds the SETMOM edges to Antenatal.
func (pu *PregnantUpdate) AddSETMOM(a ...*Antenatal) *PregnantUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddSETMOMIDs(ids...)
}

// Mutation returns the PregnantMutation object of the builder.
func (pu *PregnantUpdate) Mutation() *PregnantMutation {
	return pu.mutation
}

// RemoveSETMOMIDs removes the SETMOM edge to Antenatal by ids.
func (pu *PregnantUpdate) RemoveSETMOMIDs(ids ...int) *PregnantUpdate {
	pu.mutation.RemoveSETMOMIDs(ids...)
	return pu
}

// RemoveSETMOM removes SETMOM edges to Antenatal.
func (pu *PregnantUpdate) RemoveSETMOM(a ...*Antenatal) *PregnantUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveSETMOMIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PregnantUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := pu.mutation.PREGNANTNAME(); ok {
		if err := pregnant.PREGNANTNAMEValidator(v); err != nil {
			return 0, &ValidationError{Name: "PREGNANT_NAME", err: fmt.Errorf("ent: validator failed for field \"PREGNANT_NAME\": %w", err)}
		}
	}
	if v, ok := pu.mutation.PREGNANTAGE(); ok {
		if err := pregnant.PREGNANTAGEValidator(v); err != nil {
			return 0, &ValidationError{Name: "PREGNANT_AGE", err: fmt.Errorf("ent: validator failed for field \"PREGNANT_AGE\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PregnantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PregnantUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PregnantUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PregnantUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PregnantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pregnant.Table,
			Columns: pregnant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pregnant.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.PREGNANTNAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnant.FieldPREGNANTNAME,
		})
	}
	if value, ok := pu.mutation.PREGNANTAGE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnant.FieldPREGNANTAGE,
		})
	}
	if value, ok := pu.mutation.AddedPREGNANTAGE(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnant.FieldPREGNANTAGE,
		})
	}
	if nodes := pu.mutation.RemovedSETMOMIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pregnant.SETMOMTable,
			Columns: []string{pregnant.SETMOMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: antenatal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SETMOMIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pregnant.SETMOMTable,
			Columns: []string{pregnant.SETMOMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: antenatal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pregnant.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PregnantUpdateOne is the builder for updating a single Pregnant entity.
type PregnantUpdateOne struct {
	config
	hooks    []Hook
	mutation *PregnantMutation
}

// SetPREGNANTNAME sets the PREGNANT_NAME field.
func (puo *PregnantUpdateOne) SetPREGNANTNAME(s string) *PregnantUpdateOne {
	puo.mutation.SetPREGNANTNAME(s)
	return puo
}

// SetPREGNANTAGE sets the PREGNANT_AGE field.
func (puo *PregnantUpdateOne) SetPREGNANTAGE(i int) *PregnantUpdateOne {
	puo.mutation.ResetPREGNANTAGE()
	puo.mutation.SetPREGNANTAGE(i)
	return puo
}

// AddPREGNANTAGE adds i to PREGNANT_AGE.
func (puo *PregnantUpdateOne) AddPREGNANTAGE(i int) *PregnantUpdateOne {
	puo.mutation.AddPREGNANTAGE(i)
	return puo
}

// AddSETMOMIDs adds the SETMOM edge to Antenatal by ids.
func (puo *PregnantUpdateOne) AddSETMOMIDs(ids ...int) *PregnantUpdateOne {
	puo.mutation.AddSETMOMIDs(ids...)
	return puo
}

// AddSETMOM adds the SETMOM edges to Antenatal.
func (puo *PregnantUpdateOne) AddSETMOM(a ...*Antenatal) *PregnantUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddSETMOMIDs(ids...)
}

// Mutation returns the PregnantMutation object of the builder.
func (puo *PregnantUpdateOne) Mutation() *PregnantMutation {
	return puo.mutation
}

// RemoveSETMOMIDs removes the SETMOM edge to Antenatal by ids.
func (puo *PregnantUpdateOne) RemoveSETMOMIDs(ids ...int) *PregnantUpdateOne {
	puo.mutation.RemoveSETMOMIDs(ids...)
	return puo
}

// RemoveSETMOM removes SETMOM edges to Antenatal.
func (puo *PregnantUpdateOne) RemoveSETMOM(a ...*Antenatal) *PregnantUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveSETMOMIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (puo *PregnantUpdateOne) Save(ctx context.Context) (*Pregnant, error) {
	if v, ok := puo.mutation.PREGNANTNAME(); ok {
		if err := pregnant.PREGNANTNAMEValidator(v); err != nil {
			return nil, &ValidationError{Name: "PREGNANT_NAME", err: fmt.Errorf("ent: validator failed for field \"PREGNANT_NAME\": %w", err)}
		}
	}
	if v, ok := puo.mutation.PREGNANTAGE(); ok {
		if err := pregnant.PREGNANTAGEValidator(v); err != nil {
			return nil, &ValidationError{Name: "PREGNANT_AGE", err: fmt.Errorf("ent: validator failed for field \"PREGNANT_AGE\": %w", err)}
		}
	}

	var (
		err  error
		node *Pregnant
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PregnantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PregnantUpdateOne) SaveX(ctx context.Context) *Pregnant {
	pr, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pr
}

// Exec executes the query on the entity.
func (puo *PregnantUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PregnantUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PregnantUpdateOne) sqlSave(ctx context.Context) (pr *Pregnant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pregnant.Table,
			Columns: pregnant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pregnant.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Pregnant.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.PREGNANTNAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnant.FieldPREGNANTNAME,
		})
	}
	if value, ok := puo.mutation.PREGNANTAGE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnant.FieldPREGNANTAGE,
		})
	}
	if value, ok := puo.mutation.AddedPREGNANTAGE(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnant.FieldPREGNANTAGE,
		})
	}
	if nodes := puo.mutation.RemovedSETMOMIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pregnant.SETMOMTable,
			Columns: []string{pregnant.SETMOMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: antenatal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SETMOMIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pregnant.SETMOMTable,
			Columns: []string{pregnant.SETMOMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: antenatal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pr = &Pregnant{config: puo.config}
	_spec.Assign = pr.assignValues
	_spec.ScanValues = pr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pregnant.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pr, nil
}
