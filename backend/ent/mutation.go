// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/F12aPPy/app/ent/antenatal"
	"github.com/F12aPPy/app/ent/babystatus"
	"github.com/F12aPPy/app/ent/pregnant"
	"github.com/F12aPPy/app/ent/user"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAntenatal  = "Antenatal"
	TypeBabystatus = "Babystatus"
	TypePregnant   = "Pregnant"
	TypeUser       = "User"
)

// AntenatalMutation represents an operation that mutate the Antenatals
// nodes in the graph.
type AntenatalMutation struct {
	config
	op                Op
	typ               string
	id                *int
	_ADDED_TIME       *time.Time
	clearedFields     map[string]struct{}
	_GETMOM           *int
	cleared_GETMOM    bool
	_TAKECARE         *int
	cleared_TAKECARE  bool
	_GETSTATUS        *int
	cleared_GETSTATUS bool
	done              bool
	oldValue          func(context.Context) (*Antenatal, error)
}

var _ ent.Mutation = (*AntenatalMutation)(nil)

// antenatalOption allows to manage the mutation configuration using functional options.
type antenatalOption func(*AntenatalMutation)

// newAntenatalMutation creates new mutation for $n.Name.
func newAntenatalMutation(c config, op Op, opts ...antenatalOption) *AntenatalMutation {
	m := &AntenatalMutation{
		config:        c,
		op:            op,
		typ:           TypeAntenatal,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAntenatalID sets the id field of the mutation.
func withAntenatalID(id int) antenatalOption {
	return func(m *AntenatalMutation) {
		var (
			err   error
			once  sync.Once
			value *Antenatal
		)
		m.oldValue = func(ctx context.Context) (*Antenatal, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Antenatal.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAntenatal sets the old Antenatal of the mutation.
func withAntenatal(node *Antenatal) antenatalOption {
	return func(m *AntenatalMutation) {
		m.oldValue = func(context.Context) (*Antenatal, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AntenatalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AntenatalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *AntenatalMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetADDEDTIME sets the ADDED_TIME field.
func (m *AntenatalMutation) SetADDEDTIME(t time.Time) {
	m._ADDED_TIME = &t
}

// ADDEDTIME returns the ADDED_TIME value in the mutation.
func (m *AntenatalMutation) ADDEDTIME() (r time.Time, exists bool) {
	v := m._ADDED_TIME
	if v == nil {
		return
	}
	return *v, true
}

// OldADDEDTIME returns the old ADDED_TIME value of the Antenatal.
// If the Antenatal object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AntenatalMutation) OldADDEDTIME(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldADDEDTIME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldADDEDTIME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldADDEDTIME: %w", err)
	}
	return oldValue.ADDEDTIME, nil
}

// ResetADDEDTIME reset all changes of the "ADDED_TIME" field.
func (m *AntenatalMutation) ResetADDEDTIME() {
	m._ADDED_TIME = nil
}

// SetGETMOMID sets the GETMOM edge to Pregnant by id.
func (m *AntenatalMutation) SetGETMOMID(id int) {
	m._GETMOM = &id
}

// ClearGETMOM clears the GETMOM edge to Pregnant.
func (m *AntenatalMutation) ClearGETMOM() {
	m.cleared_GETMOM = true
}

// GETMOMCleared returns if the edge GETMOM was cleared.
func (m *AntenatalMutation) GETMOMCleared() bool {
	return m.cleared_GETMOM
}

// GETMOMID returns the GETMOM id in the mutation.
func (m *AntenatalMutation) GETMOMID() (id int, exists bool) {
	if m._GETMOM != nil {
		return *m._GETMOM, true
	}
	return
}

// GETMOMIDs returns the GETMOM ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// GETMOMID instead. It exists only for internal usage by the builders.
func (m *AntenatalMutation) GETMOMIDs() (ids []int) {
	if id := m._GETMOM; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGETMOM reset all changes of the "GETMOM" edge.
func (m *AntenatalMutation) ResetGETMOM() {
	m._GETMOM = nil
	m.cleared_GETMOM = false
}

// SetTAKECAREID sets the TAKECARE edge to User by id.
func (m *AntenatalMutation) SetTAKECAREID(id int) {
	m._TAKECARE = &id
}

// ClearTAKECARE clears the TAKECARE edge to User.
func (m *AntenatalMutation) ClearTAKECARE() {
	m.cleared_TAKECARE = true
}

// TAKECARECleared returns if the edge TAKECARE was cleared.
func (m *AntenatalMutation) TAKECARECleared() bool {
	return m.cleared_TAKECARE
}

// TAKECAREID returns the TAKECARE id in the mutation.
func (m *AntenatalMutation) TAKECAREID() (id int, exists bool) {
	if m._TAKECARE != nil {
		return *m._TAKECARE, true
	}
	return
}

// TAKECAREIDs returns the TAKECARE ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// TAKECAREID instead. It exists only for internal usage by the builders.
func (m *AntenatalMutation) TAKECAREIDs() (ids []int) {
	if id := m._TAKECARE; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTAKECARE reset all changes of the "TAKECARE" edge.
func (m *AntenatalMutation) ResetTAKECARE() {
	m._TAKECARE = nil
	m.cleared_TAKECARE = false
}

// SetGETSTATUSID sets the GETSTATUS edge to Babystatus by id.
func (m *AntenatalMutation) SetGETSTATUSID(id int) {
	m._GETSTATUS = &id
}

// ClearGETSTATUS clears the GETSTATUS edge to Babystatus.
func (m *AntenatalMutation) ClearGETSTATUS() {
	m.cleared_GETSTATUS = true
}

// GETSTATUSCleared returns if the edge GETSTATUS was cleared.
func (m *AntenatalMutation) GETSTATUSCleared() bool {
	return m.cleared_GETSTATUS
}

// GETSTATUSID returns the GETSTATUS id in the mutation.
func (m *AntenatalMutation) GETSTATUSID() (id int, exists bool) {
	if m._GETSTATUS != nil {
		return *m._GETSTATUS, true
	}
	return
}

// GETSTATUSIDs returns the GETSTATUS ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// GETSTATUSID instead. It exists only for internal usage by the builders.
func (m *AntenatalMutation) GETSTATUSIDs() (ids []int) {
	if id := m._GETSTATUS; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGETSTATUS reset all changes of the "GETSTATUS" edge.
func (m *AntenatalMutation) ResetGETSTATUS() {
	m._GETSTATUS = nil
	m.cleared_GETSTATUS = false
}

// Op returns the operation name.
func (m *AntenatalMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Antenatal).
func (m *AntenatalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *AntenatalMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._ADDED_TIME != nil {
		fields = append(fields, antenatal.FieldADDEDTIME)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *AntenatalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case antenatal.FieldADDEDTIME:
		return m.ADDEDTIME()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *AntenatalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case antenatal.FieldADDEDTIME:
		return m.OldADDEDTIME(ctx)
	}
	return nil, fmt.Errorf("unknown Antenatal field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AntenatalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case antenatal.FieldADDEDTIME:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetADDEDTIME(v)
		return nil
	}
	return fmt.Errorf("unknown Antenatal field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *AntenatalMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *AntenatalMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AntenatalMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Antenatal numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *AntenatalMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *AntenatalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *AntenatalMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Antenatal nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *AntenatalMutation) ResetField(name string) error {
	switch name {
	case antenatal.FieldADDEDTIME:
		m.ResetADDEDTIME()
		return nil
	}
	return fmt.Errorf("unknown Antenatal field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *AntenatalMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m._GETMOM != nil {
		edges = append(edges, antenatal.EdgeGETMOM)
	}
	if m._TAKECARE != nil {
		edges = append(edges, antenatal.EdgeTAKECARE)
	}
	if m._GETSTATUS != nil {
		edges = append(edges, antenatal.EdgeGETSTATUS)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *AntenatalMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case antenatal.EdgeGETMOM:
		if id := m._GETMOM; id != nil {
			return []ent.Value{*id}
		}
	case antenatal.EdgeTAKECARE:
		if id := m._TAKECARE; id != nil {
			return []ent.Value{*id}
		}
	case antenatal.EdgeGETSTATUS:
		if id := m._GETSTATUS; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *AntenatalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *AntenatalMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *AntenatalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleared_GETMOM {
		edges = append(edges, antenatal.EdgeGETMOM)
	}
	if m.cleared_TAKECARE {
		edges = append(edges, antenatal.EdgeTAKECARE)
	}
	if m.cleared_GETSTATUS {
		edges = append(edges, antenatal.EdgeGETSTATUS)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *AntenatalMutation) EdgeCleared(name string) bool {
	switch name {
	case antenatal.EdgeGETMOM:
		return m.cleared_GETMOM
	case antenatal.EdgeTAKECARE:
		return m.cleared_TAKECARE
	case antenatal.EdgeGETSTATUS:
		return m.cleared_GETSTATUS
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *AntenatalMutation) ClearEdge(name string) error {
	switch name {
	case antenatal.EdgeGETMOM:
		m.ClearGETMOM()
		return nil
	case antenatal.EdgeTAKECARE:
		m.ClearTAKECARE()
		return nil
	case antenatal.EdgeGETSTATUS:
		m.ClearGETSTATUS()
		return nil
	}
	return fmt.Errorf("unknown Antenatal unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *AntenatalMutation) ResetEdge(name string) error {
	switch name {
	case antenatal.EdgeGETMOM:
		m.ResetGETMOM()
		return nil
	case antenatal.EdgeTAKECARE:
		m.ResetTAKECARE()
		return nil
	case antenatal.EdgeGETSTATUS:
		m.ResetGETSTATUS()
		return nil
	}
	return fmt.Errorf("unknown Antenatal edge %s", name)
}

// BabystatusMutation represents an operation that mutate the Babystatuses
// nodes in the graph.
type BabystatusMutation struct {
	config
	op                Op
	typ               string
	id                *int
	_STATUS_BABY_NAME *string
	clearedFields     map[string]struct{}
	_SETSTATUS        map[int]struct{}
	removed_SETSTATUS map[int]struct{}
	done              bool
	oldValue          func(context.Context) (*Babystatus, error)
}

var _ ent.Mutation = (*BabystatusMutation)(nil)

// babystatusOption allows to manage the mutation configuration using functional options.
type babystatusOption func(*BabystatusMutation)

// newBabystatusMutation creates new mutation for $n.Name.
func newBabystatusMutation(c config, op Op, opts ...babystatusOption) *BabystatusMutation {
	m := &BabystatusMutation{
		config:        c,
		op:            op,
		typ:           TypeBabystatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBabystatusID sets the id field of the mutation.
func withBabystatusID(id int) babystatusOption {
	return func(m *BabystatusMutation) {
		var (
			err   error
			once  sync.Once
			value *Babystatus
		)
		m.oldValue = func(ctx context.Context) (*Babystatus, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Babystatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBabystatus sets the old Babystatus of the mutation.
func withBabystatus(node *Babystatus) babystatusOption {
	return func(m *BabystatusMutation) {
		m.oldValue = func(context.Context) (*Babystatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BabystatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BabystatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *BabystatusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSTATUSBABYNAME sets the STATUS_BABY_NAME field.
func (m *BabystatusMutation) SetSTATUSBABYNAME(s string) {
	m._STATUS_BABY_NAME = &s
}

// STATUSBABYNAME returns the STATUS_BABY_NAME value in the mutation.
func (m *BabystatusMutation) STATUSBABYNAME() (r string, exists bool) {
	v := m._STATUS_BABY_NAME
	if v == nil {
		return
	}
	return *v, true
}

// OldSTATUSBABYNAME returns the old STATUS_BABY_NAME value of the Babystatus.
// If the Babystatus object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BabystatusMutation) OldSTATUSBABYNAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSTATUSBABYNAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSTATUSBABYNAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSTATUSBABYNAME: %w", err)
	}
	return oldValue.STATUSBABYNAME, nil
}

// ResetSTATUSBABYNAME reset all changes of the "STATUS_BABY_NAME" field.
func (m *BabystatusMutation) ResetSTATUSBABYNAME() {
	m._STATUS_BABY_NAME = nil
}

// AddSETSTATUSIDs adds the SETSTATUS edge to Antenatal by ids.
func (m *BabystatusMutation) AddSETSTATUSIDs(ids ...int) {
	if m._SETSTATUS == nil {
		m._SETSTATUS = make(map[int]struct{})
	}
	for i := range ids {
		m._SETSTATUS[ids[i]] = struct{}{}
	}
}

// RemoveSETSTATUSIDs removes the SETSTATUS edge to Antenatal by ids.
func (m *BabystatusMutation) RemoveSETSTATUSIDs(ids ...int) {
	if m.removed_SETSTATUS == nil {
		m.removed_SETSTATUS = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_SETSTATUS[ids[i]] = struct{}{}
	}
}

// RemovedSETSTATUS returns the removed ids of SETSTATUS.
func (m *BabystatusMutation) RemovedSETSTATUSIDs() (ids []int) {
	for id := range m.removed_SETSTATUS {
		ids = append(ids, id)
	}
	return
}

// SETSTATUSIDs returns the SETSTATUS ids in the mutation.
func (m *BabystatusMutation) SETSTATUSIDs() (ids []int) {
	for id := range m._SETSTATUS {
		ids = append(ids, id)
	}
	return
}

// ResetSETSTATUS reset all changes of the "SETSTATUS" edge.
func (m *BabystatusMutation) ResetSETSTATUS() {
	m._SETSTATUS = nil
	m.removed_SETSTATUS = nil
}

// Op returns the operation name.
func (m *BabystatusMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Babystatus).
func (m *BabystatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *BabystatusMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._STATUS_BABY_NAME != nil {
		fields = append(fields, babystatus.FieldSTATUSBABYNAME)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *BabystatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case babystatus.FieldSTATUSBABYNAME:
		return m.STATUSBABYNAME()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *BabystatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case babystatus.FieldSTATUSBABYNAME:
		return m.OldSTATUSBABYNAME(ctx)
	}
	return nil, fmt.Errorf("unknown Babystatus field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BabystatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case babystatus.FieldSTATUSBABYNAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSTATUSBABYNAME(v)
		return nil
	}
	return fmt.Errorf("unknown Babystatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *BabystatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *BabystatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BabystatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Babystatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *BabystatusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *BabystatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *BabystatusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Babystatus nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *BabystatusMutation) ResetField(name string) error {
	switch name {
	case babystatus.FieldSTATUSBABYNAME:
		m.ResetSTATUSBABYNAME()
		return nil
	}
	return fmt.Errorf("unknown Babystatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *BabystatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._SETSTATUS != nil {
		edges = append(edges, babystatus.EdgeSETSTATUS)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *BabystatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case babystatus.EdgeSETSTATUS:
		ids := make([]ent.Value, 0, len(m._SETSTATUS))
		for id := range m._SETSTATUS {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *BabystatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_SETSTATUS != nil {
		edges = append(edges, babystatus.EdgeSETSTATUS)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *BabystatusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case babystatus.EdgeSETSTATUS:
		ids := make([]ent.Value, 0, len(m.removed_SETSTATUS))
		for id := range m.removed_SETSTATUS {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *BabystatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *BabystatusMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *BabystatusMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Babystatus unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *BabystatusMutation) ResetEdge(name string) error {
	switch name {
	case babystatus.EdgeSETSTATUS:
		m.ResetSETSTATUS()
		return nil
	}
	return fmt.Errorf("unknown Babystatus edge %s", name)
}

// PregnantMutation represents an operation that mutate the Pregnants
// nodes in the graph.
type PregnantMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_PREGNANT_NAME   *string
	_PREGNANT_AGE    *int
	add_PREGNANT_AGE *int
	clearedFields    map[string]struct{}
	_SETMOM          map[int]struct{}
	removed_SETMOM   map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*Pregnant, error)
}

var _ ent.Mutation = (*PregnantMutation)(nil)

// pregnantOption allows to manage the mutation configuration using functional options.
type pregnantOption func(*PregnantMutation)

// newPregnantMutation creates new mutation for $n.Name.
func newPregnantMutation(c config, op Op, opts ...pregnantOption) *PregnantMutation {
	m := &PregnantMutation{
		config:        c,
		op:            op,
		typ:           TypePregnant,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPregnantID sets the id field of the mutation.
func withPregnantID(id int) pregnantOption {
	return func(m *PregnantMutation) {
		var (
			err   error
			once  sync.Once
			value *Pregnant
		)
		m.oldValue = func(ctx context.Context) (*Pregnant, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Pregnant.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPregnant sets the old Pregnant of the mutation.
func withPregnant(node *Pregnant) pregnantOption {
	return func(m *PregnantMutation) {
		m.oldValue = func(context.Context) (*Pregnant, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PregnantMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PregnantMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PregnantMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPREGNANTNAME sets the PREGNANT_NAME field.
func (m *PregnantMutation) SetPREGNANTNAME(s string) {
	m._PREGNANT_NAME = &s
}

// PREGNANTNAME returns the PREGNANT_NAME value in the mutation.
func (m *PregnantMutation) PREGNANTNAME() (r string, exists bool) {
	v := m._PREGNANT_NAME
	if v == nil {
		return
	}
	return *v, true
}

// OldPREGNANTNAME returns the old PREGNANT_NAME value of the Pregnant.
// If the Pregnant object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PregnantMutation) OldPREGNANTNAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPREGNANTNAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPREGNANTNAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPREGNANTNAME: %w", err)
	}
	return oldValue.PREGNANTNAME, nil
}

// ResetPREGNANTNAME reset all changes of the "PREGNANT_NAME" field.
func (m *PregnantMutation) ResetPREGNANTNAME() {
	m._PREGNANT_NAME = nil
}

// SetPREGNANTAGE sets the PREGNANT_AGE field.
func (m *PregnantMutation) SetPREGNANTAGE(i int) {
	m._PREGNANT_AGE = &i
	m.add_PREGNANT_AGE = nil
}

// PREGNANTAGE returns the PREGNANT_AGE value in the mutation.
func (m *PregnantMutation) PREGNANTAGE() (r int, exists bool) {
	v := m._PREGNANT_AGE
	if v == nil {
		return
	}
	return *v, true
}

// OldPREGNANTAGE returns the old PREGNANT_AGE value of the Pregnant.
// If the Pregnant object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PregnantMutation) OldPREGNANTAGE(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPREGNANTAGE is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPREGNANTAGE requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPREGNANTAGE: %w", err)
	}
	return oldValue.PREGNANTAGE, nil
}

// AddPREGNANTAGE adds i to PREGNANT_AGE.
func (m *PregnantMutation) AddPREGNANTAGE(i int) {
	if m.add_PREGNANT_AGE != nil {
		*m.add_PREGNANT_AGE += i
	} else {
		m.add_PREGNANT_AGE = &i
	}
}

// AddedPREGNANTAGE returns the value that was added to the PREGNANT_AGE field in this mutation.
func (m *PregnantMutation) AddedPREGNANTAGE() (r int, exists bool) {
	v := m.add_PREGNANT_AGE
	if v == nil {
		return
	}
	return *v, true
}

// ResetPREGNANTAGE reset all changes of the "PREGNANT_AGE" field.
func (m *PregnantMutation) ResetPREGNANTAGE() {
	m._PREGNANT_AGE = nil
	m.add_PREGNANT_AGE = nil
}

// AddSETMOMIDs adds the SETMOM edge to Antenatal by ids.
func (m *PregnantMutation) AddSETMOMIDs(ids ...int) {
	if m._SETMOM == nil {
		m._SETMOM = make(map[int]struct{})
	}
	for i := range ids {
		m._SETMOM[ids[i]] = struct{}{}
	}
}

// RemoveSETMOMIDs removes the SETMOM edge to Antenatal by ids.
func (m *PregnantMutation) RemoveSETMOMIDs(ids ...int) {
	if m.removed_SETMOM == nil {
		m.removed_SETMOM = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_SETMOM[ids[i]] = struct{}{}
	}
}

// RemovedSETMOM returns the removed ids of SETMOM.
func (m *PregnantMutation) RemovedSETMOMIDs() (ids []int) {
	for id := range m.removed_SETMOM {
		ids = append(ids, id)
	}
	return
}

// SETMOMIDs returns the SETMOM ids in the mutation.
func (m *PregnantMutation) SETMOMIDs() (ids []int) {
	for id := range m._SETMOM {
		ids = append(ids, id)
	}
	return
}

// ResetSETMOM reset all changes of the "SETMOM" edge.
func (m *PregnantMutation) ResetSETMOM() {
	m._SETMOM = nil
	m.removed_SETMOM = nil
}

// Op returns the operation name.
func (m *PregnantMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Pregnant).
func (m *PregnantMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PregnantMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._PREGNANT_NAME != nil {
		fields = append(fields, pregnant.FieldPREGNANTNAME)
	}
	if m._PREGNANT_AGE != nil {
		fields = append(fields, pregnant.FieldPREGNANTAGE)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PregnantMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pregnant.FieldPREGNANTNAME:
		return m.PREGNANTNAME()
	case pregnant.FieldPREGNANTAGE:
		return m.PREGNANTAGE()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PregnantMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pregnant.FieldPREGNANTNAME:
		return m.OldPREGNANTNAME(ctx)
	case pregnant.FieldPREGNANTAGE:
		return m.OldPREGNANTAGE(ctx)
	}
	return nil, fmt.Errorf("unknown Pregnant field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PregnantMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pregnant.FieldPREGNANTNAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPREGNANTNAME(v)
		return nil
	case pregnant.FieldPREGNANTAGE:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPREGNANTAGE(v)
		return nil
	}
	return fmt.Errorf("unknown Pregnant field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PregnantMutation) AddedFields() []string {
	var fields []string
	if m.add_PREGNANT_AGE != nil {
		fields = append(fields, pregnant.FieldPREGNANTAGE)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PregnantMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case pregnant.FieldPREGNANTAGE:
		return m.AddedPREGNANTAGE()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PregnantMutation) AddField(name string, value ent.Value) error {
	switch name {
	case pregnant.FieldPREGNANTAGE:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPREGNANTAGE(v)
		return nil
	}
	return fmt.Errorf("unknown Pregnant numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PregnantMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PregnantMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PregnantMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Pregnant nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PregnantMutation) ResetField(name string) error {
	switch name {
	case pregnant.FieldPREGNANTNAME:
		m.ResetPREGNANTNAME()
		return nil
	case pregnant.FieldPREGNANTAGE:
		m.ResetPREGNANTAGE()
		return nil
	}
	return fmt.Errorf("unknown Pregnant field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PregnantMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._SETMOM != nil {
		edges = append(edges, pregnant.EdgeSETMOM)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PregnantMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case pregnant.EdgeSETMOM:
		ids := make([]ent.Value, 0, len(m._SETMOM))
		for id := range m._SETMOM {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PregnantMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_SETMOM != nil {
		edges = append(edges, pregnant.EdgeSETMOM)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PregnantMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case pregnant.EdgeSETMOM:
		ids := make([]ent.Value, 0, len(m.removed_SETMOM))
		for id := range m.removed_SETMOM {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PregnantMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PregnantMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PregnantMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Pregnant unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PregnantMutation) ResetEdge(name string) error {
	switch name {
	case pregnant.EdgeSETMOM:
		m.ResetSETMOM()
		return nil
	}
	return fmt.Errorf("unknown Pregnant edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_USER_EMAIL   *string
	_USER_NAME    *string
	clearedFields map[string]struct{}
	_CARE         map[int]struct{}
	removed_CARE  map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUSEREMAIL sets the USER_EMAIL field.
func (m *UserMutation) SetUSEREMAIL(s string) {
	m._USER_EMAIL = &s
}

// USEREMAIL returns the USER_EMAIL value in the mutation.
func (m *UserMutation) USEREMAIL() (r string, exists bool) {
	v := m._USER_EMAIL
	if v == nil {
		return
	}
	return *v, true
}

// OldUSEREMAIL returns the old USER_EMAIL value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUSEREMAIL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUSEREMAIL is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUSEREMAIL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUSEREMAIL: %w", err)
	}
	return oldValue.USEREMAIL, nil
}

// ResetUSEREMAIL reset all changes of the "USER_EMAIL" field.
func (m *UserMutation) ResetUSEREMAIL() {
	m._USER_EMAIL = nil
}

// SetUSERNAME sets the USER_NAME field.
func (m *UserMutation) SetUSERNAME(s string) {
	m._USER_NAME = &s
}

// USERNAME returns the USER_NAME value in the mutation.
func (m *UserMutation) USERNAME() (r string, exists bool) {
	v := m._USER_NAME
	if v == nil {
		return
	}
	return *v, true
}

// OldUSERNAME returns the old USER_NAME value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUSERNAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUSERNAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUSERNAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUSERNAME: %w", err)
	}
	return oldValue.USERNAME, nil
}

// ResetUSERNAME reset all changes of the "USER_NAME" field.
func (m *UserMutation) ResetUSERNAME() {
	m._USER_NAME = nil
}

// AddCAREIDs adds the CARE edge to Antenatal by ids.
func (m *UserMutation) AddCAREIDs(ids ...int) {
	if m._CARE == nil {
		m._CARE = make(map[int]struct{})
	}
	for i := range ids {
		m._CARE[ids[i]] = struct{}{}
	}
}

// RemoveCAREIDs removes the CARE edge to Antenatal by ids.
func (m *UserMutation) RemoveCAREIDs(ids ...int) {
	if m.removed_CARE == nil {
		m.removed_CARE = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_CARE[ids[i]] = struct{}{}
	}
}

// RemovedCARE returns the removed ids of CARE.
func (m *UserMutation) RemovedCAREIDs() (ids []int) {
	for id := range m.removed_CARE {
		ids = append(ids, id)
	}
	return
}

// CAREIDs returns the CARE ids in the mutation.
func (m *UserMutation) CAREIDs() (ids []int) {
	for id := range m._CARE {
		ids = append(ids, id)
	}
	return
}

// ResetCARE reset all changes of the "CARE" edge.
func (m *UserMutation) ResetCARE() {
	m._CARE = nil
	m.removed_CARE = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._USER_EMAIL != nil {
		fields = append(fields, user.FieldUSEREMAIL)
	}
	if m._USER_NAME != nil {
		fields = append(fields, user.FieldUSERNAME)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUSEREMAIL:
		return m.USEREMAIL()
	case user.FieldUSERNAME:
		return m.USERNAME()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUSEREMAIL:
		return m.OldUSEREMAIL(ctx)
	case user.FieldUSERNAME:
		return m.OldUSERNAME(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUSEREMAIL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUSEREMAIL(v)
		return nil
	case user.FieldUSERNAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUSERNAME(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUSEREMAIL:
		m.ResetUSEREMAIL()
		return nil
	case user.FieldUSERNAME:
		m.ResetUSERNAME()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._CARE != nil {
		edges = append(edges, user.EdgeCARE)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCARE:
		ids := make([]ent.Value, 0, len(m._CARE))
		for id := range m._CARE {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_CARE != nil {
		edges = append(edges, user.EdgeCARE)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCARE:
		ids := make([]ent.Value, 0, len(m.removed_CARE))
		for id := range m.removed_CARE {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeCARE:
		m.ResetCARE()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
