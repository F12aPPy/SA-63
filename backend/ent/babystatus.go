// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/F12aPPy/app/ent/babystatus"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Babystatus is the model entity for the Babystatus schema.
type Babystatus struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// STATUSBABYNAME holds the value of the "STATUS_BABY_NAME" field.
	STATUSBABYNAME string `json:"STATUS_BABY_NAME,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BabystatusQuery when eager-loading is set.
	Edges BabystatusEdges `json:"edges"`
}

// BabystatusEdges holds the relations/edges for other nodes in the graph.
type BabystatusEdges struct {
	// SETSTATUS holds the value of the SETSTATUS edge.
	SETSTATUS []*Antenatal
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SETSTATUSOrErr returns the SETSTATUS value or an error if the edge
// was not loaded in eager-loading.
func (e BabystatusEdges) SETSTATUSOrErr() ([]*Antenatal, error) {
	if e.loadedTypes[0] {
		return e.SETSTATUS, nil
	}
	return nil, &NotLoadedError{edge: "SETSTATUS"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Babystatus) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // STATUS_BABY_NAME
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Babystatus fields.
func (b *Babystatus) assignValues(values ...interface{}) error {
	if m, n := len(values), len(babystatus.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	b.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field STATUS_BABY_NAME", values[0])
	} else if value.Valid {
		b.STATUSBABYNAME = value.String
	}
	return nil
}

// QuerySETSTATUS queries the SETSTATUS edge of the Babystatus.
func (b *Babystatus) QuerySETSTATUS() *AntenatalQuery {
	return (&BabystatusClient{config: b.config}).QuerySETSTATUS(b)
}

// Update returns a builder for updating this Babystatus.
// Note that, you need to call Babystatus.Unwrap() before calling this method, if this Babystatus
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Babystatus) Update() *BabystatusUpdateOne {
	return (&BabystatusClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (b *Babystatus) Unwrap() *Babystatus {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Babystatus is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Babystatus) String() string {
	var builder strings.Builder
	builder.WriteString("Babystatus(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", STATUS_BABY_NAME=")
	builder.WriteString(b.STATUSBABYNAME)
	builder.WriteByte(')')
	return builder.String()
}

// Babystatuses is a parsable slice of Babystatus.
type Babystatuses []*Babystatus

func (b Babystatuses) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
