// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/F12aPPy/app/ent/antenatal"
	"github.com/F12aPPy/app/ent/babystatus"
	"github.com/F12aPPy/app/ent/patient"
	"github.com/F12aPPy/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Antenatal is the model entity for the Antenatal schema.
type Antenatal struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ADDEDTIME holds the value of the "ADDED_TIME" field.
	ADDEDTIME time.Time `json:"ADDED_TIME,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AntenatalQuery when eager-loading is set.
	Edges                AntenatalEdges `json:"edges"`
	babystatus_setstatus *int
	patient_setmom       *int
	user_care            *int
}

// AntenatalEdges holds the relations/edges for other nodes in the graph.
type AntenatalEdges struct {
	// GETMOM holds the value of the GETMOM edge.
	GETMOM *Patient
	// TAKECARE holds the value of the TAKECARE edge.
	TAKECARE *User
	// GETSTATUS holds the value of the GETSTATUS edge.
	GETSTATUS *Babystatus
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// GETMOMOrErr returns the GETMOM value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AntenatalEdges) GETMOMOrErr() (*Patient, error) {
	if e.loadedTypes[0] {
		if e.GETMOM == nil {
			// The edge GETMOM was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.GETMOM, nil
	}
	return nil, &NotLoadedError{edge: "GETMOM"}
}

// TAKECAREOrErr returns the TAKECARE value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AntenatalEdges) TAKECAREOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.TAKECARE == nil {
			// The edge TAKECARE was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.TAKECARE, nil
	}
	return nil, &NotLoadedError{edge: "TAKECARE"}
}

// GETSTATUSOrErr returns the GETSTATUS value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AntenatalEdges) GETSTATUSOrErr() (*Babystatus, error) {
	if e.loadedTypes[2] {
		if e.GETSTATUS == nil {
			// The edge GETSTATUS was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: babystatus.Label}
		}
		return e.GETSTATUS, nil
	}
	return nil, &NotLoadedError{edge: "GETSTATUS"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Antenatal) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // ADDED_TIME
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Antenatal) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // babystatus_setstatus
		&sql.NullInt64{}, // patient_setmom
		&sql.NullInt64{}, // user_care
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Antenatal fields.
func (a *Antenatal) assignValues(values ...interface{}) error {
	if m, n := len(values), len(antenatal.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	a.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field ADDED_TIME", values[0])
	} else if value.Valid {
		a.ADDEDTIME = value.Time
	}
	values = values[1:]
	if len(values) == len(antenatal.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field babystatus_setstatus", value)
		} else if value.Valid {
			a.babystatus_setstatus = new(int)
			*a.babystatus_setstatus = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field patient_setmom", value)
		} else if value.Valid {
			a.patient_setmom = new(int)
			*a.patient_setmom = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_care", value)
		} else if value.Valid {
			a.user_care = new(int)
			*a.user_care = int(value.Int64)
		}
	}
	return nil
}

// QueryGETMOM queries the GETMOM edge of the Antenatal.
func (a *Antenatal) QueryGETMOM() *PatientQuery {
	return (&AntenatalClient{config: a.config}).QueryGETMOM(a)
}

// QueryTAKECARE queries the TAKECARE edge of the Antenatal.
func (a *Antenatal) QueryTAKECARE() *UserQuery {
	return (&AntenatalClient{config: a.config}).QueryTAKECARE(a)
}

// QueryGETSTATUS queries the GETSTATUS edge of the Antenatal.
func (a *Antenatal) QueryGETSTATUS() *BabystatusQuery {
	return (&AntenatalClient{config: a.config}).QueryGETSTATUS(a)
}

// Update returns a builder for updating this Antenatal.
// Note that, you need to call Antenatal.Unwrap() before calling this method, if this Antenatal
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Antenatal) Update() *AntenatalUpdateOne {
	return (&AntenatalClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Antenatal) Unwrap() *Antenatal {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Antenatal is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Antenatal) String() string {
	var builder strings.Builder
	builder.WriteString("Antenatal(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", ADDED_TIME=")
	builder.WriteString(a.ADDEDTIME.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Antenatals is a parsable slice of Antenatal.
type Antenatals []*Antenatal

func (a Antenatals) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
